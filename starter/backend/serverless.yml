service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-offline
  - serverless-dynamodb
  - serverless-s3-local
  - serverless-webpack

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  tracing:
    apiGateway: true
    lambda: true
  environment:
    S3_BUCKET_NAME: son-doong-bucket
    SIGNED_URL_EXPIRATION: 300
    TODO_TABLE: SonDoongTable
    USER_ID_INDEX: SonDoongUserIdIndex
    JWKS_URL: https://dev-ubzav6t2jjro4wgw.us.auth0.com/.well-known/jwks.json

custom:
  documentation:
    api:
      info:
        version: '1.0'
        title: Son Doong Lambda App
        description: Son Doong Lambda app demo
      tags:
        - name: sodo
          description: sodo items
  serverless-offline:
    httpPort: 5000
  serverless-dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      docker: true
  s3:
    host: localhost
    port: 4569
    directory: ./sodo-bucket/

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    # TODO: Create a DynamoDB table with local secondary index and a composite key
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODO_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: todoId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # TODO: Complete the bucket properties below.
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_NAME}
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
                - HEAD
              AllowedOrigins:
                - '*'
              MaxAge: 3000

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: UdacityServerlessTodo
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*'
        Bucket: !Ref AttachmentsBucket

    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ValidateRequestBody: true
        ValidateRequestParameters: false
